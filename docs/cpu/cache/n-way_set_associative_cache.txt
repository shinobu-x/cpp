N Way Set Associative Cache
---------------------------
The memory cache is divided in several blocks(sets) containing "N" lines each.

E.g.,
512KB L2 Memory Cache
4 Way Set Associative Cache
Each block(set) has 4 lines
Each line has 64 bytes
Memory cache(512KB) is divided into 8192 lines
  512*1024/64 = 8192

8192 lines are categorized into 2048 blocks(sets)
  512*1024/64/4 = 2048

           +------------------+
  Set1     | Line 1 - 4       |
           +------------------+
  Set2     | Line 5 - 8       |
           +------------------+
            ...
           +------------------+
  Set 2048 | Line 8189 - 8192 |
           +------------------+

================================================================================

The main memory is divided into the same number of blocks available in the memo-
ry cache (2048).

Each memory block is linked to a set of lines inside the cache.

                                       +-----------------+
                                 +---->|                 | Block 1
                                 |     +-----------------+
           +------------------+  | +-->|                 | Block 2
  Set1     | Line 1 - 4       |--+ |   +-----------------+
           +------------------+    |    ...
  Set2     | Line 5 - 8       |----+    ...
           +------------------+         ...
            ...                         ...
           +------------------+         ...
  Set 2048 | Line 8189 - 8192 |----+    ...
           +------------------+    |    ...
                                   |   +-----------------+
                                   +-->|                 | Block 2048
                                       +-----------------+

Each memory block is mapped to each set which has 4 lines. The memory cache can
hold up to four lines from the same memory block.

There is a limited number of available slots inside each memory cache set for e-
ach memory block.

After these 4 slots are taken, the cache controller will have to free one of th-
em to store the next instruction loaded from the same memory block.

Increasing the number of ways from 4 to 8 makes the main memory to be divided i-
nto 1024. The size of each block becomes 1MB.

Increasing the L2 memory cache from 512KB to 1MB makes a number of lines to be 
divided into 16384. The main memory is divided into 4096 blocks. The size of ea-
ch block becomes 256KB.

* Larger sets and higher associativity make fewer cache conflicts and lower cac-
  he miss rates. But hardware cost is increased.

================================================================================

Writing to Cache
----------------
The address we want to write to is already loaded in the cache.

Idx  V  Tag   Data              Address
    +-+-----+------+                      +------+
... | |     |      |            ...       |      |
    +-+-----+------+                      +------+
110 |1|11010|42803 |            11010|110 |42803 |
    +-+-----+------+                      +------+
... | |     |      |            ...       |      |
    +-+-----+------+                      +------+

If we write a new value to that address, we can store the new data in the cache,
and avoid an expensive main memory access.

    Mem[214]=13245
           |
           v
Idx  V  Tag   Data              Address
    +-+-----+------+                      +------+
... | |     |      |            ...       |      |
    +-+-----+------+                      +------+
110 |1|11010|12345 |            11010|110 |42803 |
    +-+-----+------+                      +------+
... | |     |      |            ...       |      |
    +-+-----+------+                      +------+

Data Consistency Problem
------------------------
Now the cache and the cache and the main memory contain different data.

 * Rule#1: No inconsistent data
 * Rule#2: Do not think of violating Rule#1

Write Through Cache
-------------------
The < write through cache> solves the inconsistency problem by forcing all writ-
es to update both the cache and the main memory.

                      Mem[214] = 12345
                               |
               +---------------+------------+
               |                            |
               v                            |
Idx  V  Tag   Data              Address     v
    +-+-----+------+                      +------+
... | |     |      |            ...       |      |
    +-+-----+------+                      +------+
110 |1|11010|12345 |            11010|110 |12345 |
    +-+-----+------+                      +------+
... | |     |      |            ...       |      |
    +-+-----+------+                      +------+

The < write through cache > forces every write to go to the main memory. Bandwi-
dth between the cache and the main memory will be starved. The < write through 
cache > could end up with slow writes.

Write Buffer
------------
The < write buffer > queues pending writes to the main memory so that CPU conti-
nues working.

  +----------+   +--------+   +----------+
  | Producer |-->| Buffer |-->| Consumer |
  +----------+   +--------+   +----------+

  | int f(int a[M][N]) {
  |   int i, j, sum=0;
  |   for (i=0; i<M; ++i)
  |     for (j=0; j<N; ++j)
  |       sum += a[i][j];


 * If the < producer > generates data too quickly for the < consumer > to handle
   , the extra data is stored in a buffer and the < producer > can continue on 
   with other task without waiting for the < consumer >.

 * If the < producer > slows down, the < consumer > can continue running at full
   speed as long as there is excess data in the buffer.

 ** The < producer > => the CPU
 ** The < consumer > => the main memory

Write Back Cache
----------------
The < write back cache > makes the main memory not to be updated until the cache
block needs to be replaced (e.g., When loading data into a full cache set).

When we write some data to the cache memory, the cache block is marked dirty to
indicate an inconsistency.

Idx  V Dirty Tag   Data              Address
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+
110 |1|  1  |11010|12345 |            11010|110 |42803 |
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+

Subsequent reads to the same memory address will be serviced by the cache, which
contains the correct, updated data.

Idx  V Dirty Tag   Data              Address
    +-+-----+-----+------+                      +------+
... | |     |     |      |            10001|110 |6789  |
    +-+-----+-----+------+                      +------+
110 |1|  1  |11010|12345 |----------->11010|110 |12345 |
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+

On a read fom < 1000 1110 > which maps to the same cache line, the modified data
contents will be written to the main memory first off.

Idx  V Dirty Tag   Data              Address
    +-+-----+-----+------+                      +------+
... | |     |     |      |       +----10001|110 |6789  |
    +-+-----+-----+------+       |              +------+
110 |1|  0  |10001|6789  |<------+    11010|110 |12345 |
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+

The cache line is replaced with data from address < 1000 1110 >.

 * If a single address is frequently written to, it does not pay to keep writing
   that data through to the main memory.

 * If several bytes within the same cache block are modified , they will only f-
   orce one memory write operation at the < write back > time.

 * Each block in the < write back cache > needs a < dirty bit > to indicate whe-   ther it must be saved to the main memory before being replaced otherwise we 
   might perform unnecessary write backs.

Write Miss
----------

If we try to write to an address that is not already contained in the cache.
E.g.,
We want to store 9999 into < 11010110 > but that address is not currently in the
cache memroy.

Idx  V Dirty Tag   Data              Address
    +-+-----+-----+------+                      +------+
... | |     |     |      |                      |      |
    +-+-----+-----+------+                      +------+
110 |1|  1  |10001|6789  |            11010|110 |12345 |
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+

Write Around Cache ( == Write No Allocate)
------------------------------------------
The < write around > policy make the write operation to goes to directly to main
memory without affecting the cache memory.

                                     Mem[11010110]=9999
                                                  |
Idx  V Dirty Tag   Data              Address      v
    +-+-----+-----+------+                      +------+
... | |     |     |      |                      |      |
    +-+-----+-----+------+                      +------+
110 |1|  1  |10001|6789  |            11010|110 |9999  |
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+

Situation where, when data is written but not immediately used again, in which
case there is no operation to load it into the cache memory.

  | for (int i=0; i<SIZE; ++i)
  |   a[i] = i;

Allocate on Write
-----------------
An < allocate on write > strategy would load the newly written data into the ca-
che memory.

                      Mem[11010110]=9999
                                   |
                   +---------------+-------------+
                   |                             |
                   v                             |
Idx  V Dirty Tag   Data              Address     v
    +-+-----+-----+------+                      +------+
... | |     |     |      |                      |      |
    +-+-----+-----+------+                      +------+
110 |1|  1  |11010|9999  |            11010|110 |9999  |
    +-+-----+-----+------+                      +------+
... | |     |     |      |            ...       |      |
    +-+-----+-----+------+                      +------+
