namespace boost {
namespace future_state {

enum state {
  uninitialized,
  waiting,
  ready,
  moved
};

} // future_state

enum class future_errc {
  broken_promise,
  future_already_retrieved,
  promise_already_satisfied,
  no_state
};

enum class launch {
  none = unspecified,
  async = unspecified,
  deferred = unspecified,
  inherit = unspecified,
  any = async | deferred
};

enum class future_status {
  ready,
  timeout,
  deferred
};

namespace system {

template <>
struct is_error_code_enum<boost::future_errc> : public true_type {};

boost::system::error_code make_error_code(boost::future_errc e);

boost::system::error_condition make_error_condition(boost::future_errc e);

} // system

const system::error_category& future_category();

class future_error;

class exceptional_ptr;

template <typename R>
class promise;

template <typename R>
void swap(boost::promise<R>& x, boost::promise<R>& y) noexcept;

namespace container {

template <class R, class Allocator>
struct uses_allocator<boost::promise<R>, Allocator> : public true_type {};

} // container

template <typename R>
class future;
